#include "opencv2\core.hpp"
#include "opencv2\imgcodecs.hpp"
#include "opencv2\highgui.hpp"
#include "opencv2\aruco.hpp"
#include "opencv2\calib3d.hpp"

#include <sstream>
#include <iostream>
#include <fstream>

using namespace std;
using namespace cv;


//asumsikan camera/webcam sudah dikalibrasi
//Sekarang, kita akan memasukkan kalibrasi kamera yang sudah dibuat

int startWebcamMonitoring(const Mat& cameraMatrix, const Mat& distanceCoefficients, float aruqoSquareDimension)
{
    Mat frame;

    vector<int> markerIds;
    vector<vector<Point2f>> markerCorners, rejectedCandidates;
    aruco::DetectorParameters parameters;

    Ptr < aruco::Dictionary> markerDictionary = aruco::getPredefinedDictionary(aruco::PREDEFINED_DICTIONARY_NAME::DICT_4X4_50)

        VideoCapture vid(1);

    if (!vid.isOpened())
    {
        return -1;
    }

    namedWindow("Webcam", CV_WINDOW_AUTOSIZE);

    vector<Vec3d> rotationVectors, translationVectors;

    while (true)
    {
        if (!vid.read(frame))
            break;

        aruco::detectMarkers(frame, markerDictionary, markerCorners, markerIds);
        aruco::estimatePoseSingleMarkers(markerCorners, arucoSquareDimension, calibrateCamera, cameraMatrix, distanceCoefficients, rotationVectors, translationVectors);

        for (int i = 0; i < markerIds.size(); i++)
        {
            aruco::drawAxis(frame, cameraMatrix, distanceCoefficients, rotationVectors, translationVectors, 0.1f);
        }
        imshow("Webcam", frame);
        if waitKey(30) >= 0) break;
    }

    return 1;
}

int main(int argv, char** argc)
{
    Mat cameraMatrix = Mat::eye(3, 3, CV_64F);

    Mat distanceCoefficients;

    //Proses kalibrasi kamera dan menjalankan program
    loadCameraCalibration(cameraMatrix, distanceCoefficients);
    startWebcamMonitoring(cameraMatrix, distanceCoefficients, arucoSquareDimension);

    return 0;
}
